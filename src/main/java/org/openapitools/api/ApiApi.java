/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AddBookReviewDTO;
import org.openapitools.model.AddCustomerDTO;
import org.openapitools.model.AddOrderDTO;
import java.math.BigDecimal;
import org.openapitools.model.Book;
import org.openapitools.model.BookReview;
import org.openapitools.model.CustomerLoginDTO;
import org.openapitools.model.CustomerLoginResponse;
import org.openapitools.model.Order;
import org.openapitools.model.OrderItem;
import org.openapitools.model.UpdateBookReviewDTO;
import org.openapitools.model.UpdateShoppingCartDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-03-01T17:41:52.282094-05:00[America/Toronto]")

@Validated
@Api(value = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/books/{bookId}/reviews : Add Book Review
     *
     * @param bookId  (required)
     * @param addBookReviewDTO  (required)
     * @return  (status code 201)
     *         or  (status code 401)
     *         or  (status code 409)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Add Book Review", nickname = "addBookReview", notes = "", response = BookReview.class, authorizations = {
        @Authorization(value = "bearer")
    }, tags={ "book-reviews", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "", response = BookReview.class),
        @ApiResponse(code = 401, message = ""),
        @ApiResponse(code = 409, message = ""),
        @ApiResponse(code = 500, message = "") })
    @RequestMapping(value = "/api/v1/books/{bookId}/reviews",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<BookReview> addBookReview(@ApiParam(value = "",required=true) @PathVariable("bookId") String bookId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody AddBookReviewDTO addBookReviewDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"lastUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"authorCustomerId\" : \"authorCustomerId\", \"rating\" : 0.8008281904610115, \"id\" : \"id\", \"bid\" : \"bid\", \"title\" : \"title\", \"publicationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"content\" : \"content\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/customers : Add Customer
     *
     * @param addCustomerDTO  (required)
     * @return  (status code 201)
     *         or  (status code 409)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Add Customer", nickname = "addCustomer", notes = "", tags={ "customers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = ""),
        @ApiResponse(code = 409, message = ""),
        @ApiResponse(code = 500, message = "") })
    @RequestMapping(value = "/api/v1/customers",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> addCustomer(@ApiParam(value = "" ,required=true )  @Valid @RequestBody AddCustomerDTO addCustomerDTO) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/orders : Add Order
     *
     * @param addOrderDTO  (required)
     * @return  (status code 201)
     *         or  (status code 401)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Add Order", nickname = "addOrder", notes = "", response = Order.class, authorizations = {
        @Authorization(value = "bearer")
    }, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "", response = Order.class),
        @ApiResponse(code = 401, message = ""),
        @ApiResponse(code = 500, message = "") })
    @RequestMapping(value = "/api/v1/orders",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Order> addOrder(@ApiParam(value = "" ,required=true )  @Valid @RequestBody AddOrderDTO addOrderDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"customerId\" : \"customerId\", \"shippingAddress\" : { \"zip\" : \"zip\", \"country\" : \"country\", \"province\" : \"province\", \"phone\" : \"phone\", \"street\" : \"street\", \"id\" : \"id\" }, \"id\" : \"id\", \"billingAddress\" : { \"zip\" : \"zip\", \"country\" : \"country\", \"province\" : \"province\", \"phone\" : \"phone\", \"street\" : \"street\", \"id\" : \"id\" }, \"status\" : \"ORDERED\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/orders/{orderId}/cancel : Cancel Order
     *
     * @param orderId  (required)
     * @return  (status code 204)
     *         or  (status code 401)
     *         or  (status code 403)
     *         or  (status code 404)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Cancel Order", nickname = "cancelOrder", notes = "", authorizations = {
        @Authorization(value = "bearer")
    }, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = ""),
        @ApiResponse(code = 401, message = ""),
        @ApiResponse(code = 403, message = ""),
        @ApiResponse(code = 404, message = ""),
        @ApiResponse(code = 500, message = "") })
    @RequestMapping(value = "/api/v1/orders/{orderId}/cancel",
        method = RequestMethod.PATCH)
    default ResponseEntity<Void> cancelOrder(@ApiParam(value = "",required=true) @PathVariable("orderId") String orderId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/customers/{username}/login : Login
     *
     * @param username  (required)
     * @param customerLoginDTO  (required)
     * @return  (status code 201)
     */
    @ApiOperation(value = "Login", nickname = "customerLogin", notes = "", response = CustomerLoginResponse.class, tags={ "customers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "", response = CustomerLoginResponse.class) })
    @RequestMapping(value = "/api/v1/customers/{username}/login",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CustomerLoginResponse> customerLogin(@ApiParam(value = "",required=true) @PathVariable("username") String username,@ApiParam(value = "" ,required=true )  @Valid @RequestBody CustomerLoginDTO customerLoginDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expiresIn\" : 0.8008281904610115, \"scope\" : \"scope\", \"accessToken\" : \"accessToken\", \"tokenType\" : \"bearer\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/customers/{username}/logout : Logout
     *
     * @param username  (required)
     * @return  (status code 204)
     *         or  (status code 401)
     */
    @ApiOperation(value = "Logout", nickname = "customerLogout", notes = "", authorizations = {
        @Authorization(value = "bearer")
    }, tags={ "customers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = ""),
        @ApiResponse(code = 401, message = "") })
    @RequestMapping(value = "/api/v1/customers/{username}/logout",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> customerLogout(@ApiParam(value = "",required=true) @PathVariable("username") String username) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/books/{bookId}/reviews/{id} : Delete Book Review
     *
     * @param id  (required)
     * @param bookId  (required)
     * @return  (status code 204)
     *         or  (status code 401)
     *         or  (status code 403)
     *         or  (status code 404)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Delete Book Review", nickname = "deleteBookReview", notes = "", authorizations = {
        @Authorization(value = "bearer")
    }, tags={ "book-reviews", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = ""),
        @ApiResponse(code = 401, message = ""),
        @ApiResponse(code = 403, message = ""),
        @ApiResponse(code = 404, message = ""),
        @ApiResponse(code = 500, message = "") })
    @RequestMapping(value = "/api/v1/books/{bookId}/reviews/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteBookReview(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "",required=true) @PathVariable("bookId") String bookId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/books/{bookId} : Get Book
     *
     * @param bookId  (required)
     * @return  (status code 200)
     *         or  (status code 404)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Get Book", nickname = "getBook", notes = "", response = Book.class, tags={ "books", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Book.class),
        @ApiResponse(code = 404, message = ""),
        @ApiResponse(code = 500, message = "") })
    @RequestMapping(value = "/api/v1/books/{bookId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Book> getBook(@ApiParam(value = "",required=true) @PathVariable("bookId") String bookId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pages\" : 5.637376656633329, \"reviewCount\" : 5.962133916683182, \"price\" : 0.8008281904610115, \"rating\" : 6.027456183070403, \"description\" : \"description\", \"publisher\" : \"publisher\", \"bid\" : \"bid\", \"title\" : \"title\", \"ratingCount\" : 1.4658129805029452, \"category\" : \"SCIENCE\", \"publicationDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/books/{bookId}/reviews/{id} : Get Book Review
     *
     * @param id  (required)
     * @param bookId  (required)
     * @return  (status code 200)
     *         or  (status code 404)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Get Book Review", nickname = "getBookReview", notes = "", response = BookReview.class, tags={ "book-reviews", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = BookReview.class),
        @ApiResponse(code = 404, message = ""),
        @ApiResponse(code = 500, message = "") })
    @RequestMapping(value = "/api/v1/books/{bookId}/reviews/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<BookReview> getBookReview(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "",required=true) @PathVariable("bookId") String bookId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"lastUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"authorCustomerId\" : \"authorCustomerId\", \"rating\" : 0.8008281904610115, \"id\" : \"id\", \"bid\" : \"bid\", \"title\" : \"title\", \"publicationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"content\" : \"content\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/orders/{orderId} : Get Order
     *
     * @param orderId  (required)
     * @return  (status code 200)
     *         or  (status code 401)
     *         or  (status code 403)
     *         or  (status code 404)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Get Order", nickname = "getOrder", notes = "", response = OrderItem.class, authorizations = {
        @Authorization(value = "bearer")
    }, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = OrderItem.class),
        @ApiResponse(code = 401, message = ""),
        @ApiResponse(code = 403, message = ""),
        @ApiResponse(code = 404, message = ""),
        @ApiResponse(code = 500, message = "") })
    @RequestMapping(value = "/api/v1/orders/{orderId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<OrderItem> getOrder(@ApiParam(value = "",required=true) @PathVariable("orderId") String orderId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"orderId\" : \"orderId\", \"price\" : 0.8008281904610115, \"bookId\" : \"bookId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/orders/{orderId}/items/{bookId} : Get Order Item
     *
     * @param bookId  (required)
     * @param orderId  (required)
     * @return  (status code 200)
     *         or  (status code 401)
     *         or  (status code 403)
     *         or  (status code 404)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Get Order Item", nickname = "getOrderItem", notes = "", response = OrderItem.class, authorizations = {
        @Authorization(value = "bearer")
    }, tags={ "order-items", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = OrderItem.class),
        @ApiResponse(code = 401, message = ""),
        @ApiResponse(code = 403, message = ""),
        @ApiResponse(code = 404, message = ""),
        @ApiResponse(code = 500, message = "") })
    @RequestMapping(value = "/api/v1/orders/{orderId}/items/{bookId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<OrderItem> getOrderItem(@ApiParam(value = "",required=true) @PathVariable("bookId") String bookId,@ApiParam(value = "",required=true) @PathVariable("orderId") String orderId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"orderId\" : \"orderId\", \"price\" : 0.8008281904610115, \"bookId\" : \"bookId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/books/{bookId}/reviews : List Book Reviews
     *
     * @param bookId  (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param orderBy  (optional)
     * @param sortBy  (optional)
     * @param ratingLte  (optional)
     * @param ratingGte  (optional)
     * @param category  (optional)
     * @return  (status code 200)
     *         or  (status code 500)
     */
    @ApiOperation(value = "List Book Reviews", nickname = "listBookReviews", notes = "", response = BookReview.class, responseContainer = "List", tags={ "book-reviews", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = BookReview.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "") })
    @RequestMapping(value = "/api/v1/books/{bookId}/reviews",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<BookReview>> listBookReviews(@ApiParam(value = "",required=true) @PathVariable("bookId") String bookId,@ApiParam(value = "") @Valid @RequestParam(value = "offset", required = false) BigDecimal offset,@ApiParam(value = "") @Valid @RequestParam(value = "limit", required = false) BigDecimal limit,@ApiParam(value = "", allowableValues = "asc, desc") @Valid @RequestParam(value = "order-by", required = false) String orderBy,@ApiParam(value = "", allowableValues = "rating, publicationDate") @Valid @RequestParam(value = "sort-by", required = false) String sortBy,@ApiParam(value = "") @Valid @RequestParam(value = "rating[lte]", required = false) BigDecimal ratingLte,@ApiParam(value = "") @Valid @RequestParam(value = "rating[gte]", required = false) BigDecimal ratingGte,@ApiParam(value = "") @Valid @RequestParam(value = "category", required = false) String category) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"lastUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"authorCustomerId\" : \"authorCustomerId\", \"rating\" : 0.8008281904610115, \"id\" : \"id\", \"bid\" : \"bid\", \"title\" : \"title\", \"publicationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"content\" : \"content\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/books : List Books
     * List the books from this bookstore
     *
     * @param offset  (optional)
     * @param limit  (optional)
     * @param orderBy  (optional)
     * @param sortBy  (optional)
     * @param priceLte  (optional)
     * @param priceGte  (optional)
     * @param category  (optional)
     * @return  (status code 200)
     */
    @ApiOperation(value = "List Books", nickname = "listBooks", notes = "List the books from this bookstore", response = Book.class, responseContainer = "List", tags={ "books", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Book.class, responseContainer = "List") })
    @RequestMapping(value = "/api/v1/books",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Book>> listBooks(@ApiParam(value = "") @Valid @RequestParam(value = "offset", required = false) BigDecimal offset,@ApiParam(value = "") @Valid @RequestParam(value = "limit", required = false) BigDecimal limit,@ApiParam(value = "", allowableValues = "asc, desc") @Valid @RequestParam(value = "order-by", required = false) String orderBy,@ApiParam(value = "", allowableValues = "title, price, publicationDate") @Valid @RequestParam(value = "sort-by", required = false) String sortBy,@ApiParam(value = "") @Valid @RequestParam(value = "price[lte]", required = false) BigDecimal priceLte,@ApiParam(value = "") @Valid @RequestParam(value = "price[gte]", required = false) BigDecimal priceGte,@ApiParam(value = "") @Valid @RequestParam(value = "category", required = false) String category) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pages\" : 5.637376656633329, \"reviewCount\" : 5.962133916683182, \"price\" : 0.8008281904610115, \"rating\" : 6.027456183070403, \"description\" : \"description\", \"publisher\" : \"publisher\", \"bid\" : \"bid\", \"title\" : \"title\", \"ratingCount\" : 1.4658129805029452, \"category\" : \"SCIENCE\", \"publicationDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/orders/{orderId}/items : List Order Items
     *
     * @param orderId  (required)
     * @param orderBy  (optional)
     * @param sortBy  (optional)
     * @return  (status code 200)
     *         or  (status code 401)
     *         or  (status code 403)
     *         or  (status code 404)
     *         or  (status code 500)
     */
    @ApiOperation(value = "List Order Items", nickname = "listOrderItems", notes = "", response = OrderItem.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearer")
    }, tags={ "order-items", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = OrderItem.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = ""),
        @ApiResponse(code = 403, message = ""),
        @ApiResponse(code = 404, message = ""),
        @ApiResponse(code = 500, message = "") })
    @RequestMapping(value = "/api/v1/orders/{orderId}/items",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<OrderItem>> listOrderItems(@ApiParam(value = "",required=true) @PathVariable("orderId") String orderId,@ApiParam(value = "", allowableValues = "asc, desc") @Valid @RequestParam(value = "order-by", required = false) String orderBy,@ApiParam(value = "", allowableValues = "price") @Valid @RequestParam(value = "sort-by", required = false) String sortBy) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"orderId\" : \"orderId\", \"price\" : 0.8008281904610115, \"bookId\" : \"bookId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/orders : List Orders
     *
     * @param orderBy  (optional)
     * @param status  (optional)
     * @param isAfter YYYY-MM-DD (optional)
     * @param isBefore YYYY-MM-DD (optional)
     * @param sortBy  (optional)
     * @return  (status code 200)
     *         or  (status code 401)
     *         or  (status code 500)
     */
    @ApiOperation(value = "List Orders", nickname = "listOrders", notes = "", response = Order.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearer")
    }, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Order.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = ""),
        @ApiResponse(code = 500, message = "") })
    @RequestMapping(value = "/api/v1/orders",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Order>> listOrders(@ApiParam(value = "", allowableValues = "asc, desc") @Valid @RequestParam(value = "order-by", required = false) String orderBy,@ApiParam(value = "", allowableValues = "ORDERED, PROCESSED, DENIED") @Valid @RequestParam(value = "status", required = false) String status,@ApiParam(value = "YYYY-MM-DD") @Valid @RequestParam(value = "is-after", required = false) String isAfter,@ApiParam(value = "YYYY-MM-DD") @Valid @RequestParam(value = "is-before", required = false) String isBefore,@ApiParam(value = "", allowableValues = "date") @Valid @RequestParam(value = "sort-by", required = false) String sortBy) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"customerId\" : \"customerId\", \"shippingAddress\" : { \"zip\" : \"zip\", \"country\" : \"country\", \"province\" : \"province\", \"phone\" : \"phone\", \"street\" : \"street\", \"id\" : \"id\" }, \"id\" : \"id\", \"billingAddress\" : { \"zip\" : \"zip\", \"country\" : \"country\", \"province\" : \"province\", \"phone\" : \"phone\", \"street\" : \"street\", \"id\" : \"id\" }, \"status\" : \"ORDERED\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/books/{bookId}/reviews/{id} : Update Book Review
     *
     * @param id  (required)
     * @param bookId  (required)
     * @param updateBookReviewDTO  (required)
     * @return  (status code 204)
     *         or  (status code 401)
     *         or  (status code 403)
     *         or  (status code 404)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Update Book Review", nickname = "updateBookReview", notes = "", authorizations = {
        @Authorization(value = "bearer")
    }, tags={ "book-reviews", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = ""),
        @ApiResponse(code = 401, message = ""),
        @ApiResponse(code = 403, message = ""),
        @ApiResponse(code = 404, message = ""),
        @ApiResponse(code = 500, message = "") })
    @RequestMapping(value = "/api/v1/books/{bookId}/reviews/{id}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateBookReview(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "",required=true) @PathVariable("bookId") String bookId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody UpdateBookReviewDTO updateBookReviewDTO) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/customers/{username}/shopping-cart : Update Shopping Cart
     *
     * @param username  (required)
     * @param updateShoppingCartDTO  (required)
     * @return  (status code 204)
     *         or  (status code 401)
     *         or  (status code 403)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Update Shopping Cart", nickname = "updateShoppingCart", notes = "", authorizations = {
        @Authorization(value = "bearer")
    }, tags={ "customers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = ""),
        @ApiResponse(code = 401, message = ""),
        @ApiResponse(code = 403, message = ""),
        @ApiResponse(code = 500, message = "") })
    @RequestMapping(value = "/api/v1/customers/{username}/shopping-cart",
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<Void> updateShoppingCart(@ApiParam(value = "",required=true) @PathVariable("username") String username,@ApiParam(value = "" ,required=true )  @Valid @RequestBody UpdateShoppingCartDTO updateShoppingCartDTO) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
